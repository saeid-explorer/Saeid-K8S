Kubernets 


Usefull instructions:
https://gist.github.com/NotHarshhaa/854ed5c12fff07acde88faf95b9decff


modprobe overlay
modprobe br_netfilter
sysctl -w net.ipv4.ip_forward=1


 
**********Fresh Installation of K8S on master and workers***********
- sudo swapoff -a
- sudo nano /etc/fstab
       - comment out /swap line

* Sysctl params required by setup, params persist
- cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
> net.bridge.bridge-nf-call-iptables = 1
> net.bridge.bridge-nf-call-ip6tables = 1
> net.ipv4.ip_forward                 = 1
> EOF


* Apply sysctl params without reboot
- sudo sysctl --system



* Load required modules
       - sudo modprobe br_netfilter
       - sudo modprobe overlay

* verify that the br_netfilter, overlay modules are loaded by running the following commands:
lsmod | grep br_netfilter
lsmod | grep overlay


* Install container runtime
- wget https://github.com/containerd/containerd/releases/download/v2.1.1/containerd-2.1.1-linux-amd64.tar.gz
- sudo tar Cxzvf containerd-2.1.1-linux-amd64.tar.gz
- sudo mkdir -p /usr/local/lib/systemd/system
- cd /usr/local/lib/systemd/system
- sudo nano containerd.service and add the content on the following link:
       - https://raw.githubusercontent.com/containerd/containerd/main/containerd.service
- sudo mkdir -p /etc/containerd
- containerd config default | sudo tee /etc/containerd/config.toml

- sudo sed -i 's/SystemdCgroup \= false/SystemdCgroup \= true/g' /etc/containerd/config.toml

* Pulling an image and running a container with containerd
       - sudo ctr images pull docker.io/library/redis:alpine
       - sudo ctr run docker.io/library/redis:alpine redis

* Removing a container and its' image with containerd
       - sudo ctr c ls
       - sudo ctr c rm redis
       - sudo ctr images rm docker.io/library/redis:alpine


****************************403 Forbidden DNS*******************
* DNS Servers for 403 Forbidden Error
https://spaceiran.com/blog/best-iranian-dns-proxy-list
****************************************************************

*********************Kubespray*****************************
* Note: In order to run the kubespray with ansible:
       1) on ansible node, copy the public key to all the nodes of k8s cluster:
              - e.g.: ssh-copy-id -i ~/.ssh/private_key.pub user@node-ip
       2) add the following to the sudoers file of all the nodes via "sudo visudo":
              user ALL=(ALL) NOPASSWD:ALL
       3)add the following lines to /kubespray/inventory/mycluster/group_vars/all/all.yml file on ansible node:

ansible_user: user        # or whatever user you SSH as
ansible_become: true        # so Ansible can sudo
ansible_become_method: sudo
ansible_ssh_private_key_file: ~/.ssh/private_key

       4) run the kubespray cluster deployment with:
              - ansible-playbook -i inventory/mycluster/inventory.ini cluster.yml -b -v   --private-key=~/.ssh/private_key

*************************

* Configs added on inventory/mycluster/group_vars/k8s_cluster/k8s-cluster.yml:
# set kubernetes version
kube_version: "1.32.5"

************************

# Override the built-in pause image. Kubespray will not use registry.k8s.io at all.
kubelet_container_pause_image: "registry.aliyuncs.com/google_containers/pause:3.10"

# If you also want to override CoreDNS, do this as well:
coredns_image_repo: "docker.io/coredns/coredns"
coredns_image_tag: "1.11.3"



# Tell Kubespray to use the Docker Hub image instead of registry.k8s.io
kube_dns_node_cache_image: "dyrnq/k8s-dns-node-cache"
kube_dns_node_cache_version: "1.25.0"

*********************************

Note: If the kubespray couldn't pull the images:
       1) you can use aliyuncs or docker.io image repository to pull the images manually as follows:
       e.g:

 
   sudo ctr -n default image pull docker.io/rancher/mirrored-cluster-proportional-autoscaler:v1.9.0

   sudo ctr -n default image pull   registry.aliyuncs.com/google_containers/kube-controller-manager:v1.32.5

   sudo ctr -n default image pull   registry.aliyuncs.com/google_containers/kube-scheduler:v1.32.5

   sudo ctr -n default image pull   registry.aliyuncs.com/google_containers/kube-proxy:v1.32.5


       2) then import to the required namespace(e.g. k8s.io) and retag it:
              - sudo ctr -n default images export kube-proxy-v1325.tar   registry.aliyuncs.com/google_containers/kube-proxy:v1.32.5

              - sudo ctr -n k8s.io images import kube-proxy-v1325.tar

              - sudo ctr -n k8s.io images tag   registry.aliyuncs.com/google_containers/kube-proxy:v1.32.5   registry.k8s.io/kube-proxy:v1.32.5


****************
* Commands to check K8S Control-Plane Health:
       - kubectl cluster-info
       - kubectl get componentstatuses
       - kubectl get apiservices
       - kubectl get nodes
       - kubectl get pods -n kube-system
